name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-lint-${{ hashFiles('uv.lock') }}

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Lint with ruff (check)
      run: |
        uv run ruff check src tests --output-format=github

    - name: Check formatting with ruff
      run: |
        uv run ruff format --check src

    - name: Type check with mypy
      run: |
        uv run mypy src/stripje --show-error-codes

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv add bandit[toml] safety

    - name: Run bandit security linter
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json
        uv run bandit -r src/ # Also show human readable output

    - name: Check dependencies for security vulnerabilities
      run: |
        uv run safety check --output json > safety-report.json
        uv run safety check # Also show human readable output

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # docs:
    # runs-on: ubuntu-latest
    # steps:
    # - uses: actions/checkout@v4

    # - name: Set up Python 3.11
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: "3.11"

    # - name: Install uv
    #   uses: astral-sh/setup-uv@v3
    #   with:
    #     enable-cache: true

    # - name: Install dependencies
    #   run: |
    #     uv sync --extra dev
    #     uv add pydocstyle

    # - name: Check docstring style
    #   run: |
    #     uv run pydocstyle src/stripje --convention=google

    # - name: Test imports
    #   run: |
    #     uv run python -c "import stripje; print('Import successful')"
    #     uv run python -c "from stripje import compile_pipeline, get_supported_transformers; print('Core functions importable')"

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --no-dev

    - name: Test basic functionality
      run: |
        uv run python tests/integration/test_basic_functionality.py