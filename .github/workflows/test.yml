name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        sklearn-version: ["1.5.2", "1.6.0", "1.6.1", "1.7.0", "1.7.2"]
        test-category-encoders: [false]
        include:
          # Test with latest scikit-learn and category encoders
          - python-version: "3.11"
            sklearn-version: "1.7.2"
            test-category-encoders: true

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.sklearn-version }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-

    - name: Install scikit-learn ${{ matrix.sklearn-version }}
      run: |
        uv pip install scikit-learn==${{ matrix.sklearn-version }}

    - name: Install package dependencies
      run: |
        uv sync --extra dev --group testing

    - name: Install category encoders (if testing)
      if: matrix.test-category-encoders
      run: |
        uv pip install "category_encoders>=2.0.0"

    - name: Lint with ruff
      run: |
        uv run ruff check src tests
        uv run ruff format --check src tests

    - name: Type check with mypy
      run: |
        uv run mypy src/stripje --show-error-codes

    - name: Run core tests (without category encoders)
      if: ${{ !matrix.test-category-encoders }}
      run: |
        uv run pytest tests/ -v --tb=short --durations=10 \
          --ignore=tests/test_transformers/test_contrib \
          --no-cov

    - name: Run all tests (with category encoders)
      if: matrix.test-category-encoders
      run: |
        uv run pytest tests/ -v --tb=short --durations=10 \
          --cov=stripje --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.sklearn-version == '1.7.2'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-minimal:
    name: Test minimal dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install minimal dependencies
      run: |
        uv sync --no-dev --group testing

    - name: Run minimal tests (core functionality only)
      run: |
        uv run pytest tests/test_fast_pipeline.py tests/test_integration.py -v --no-cov

  test-edge-cases:
    name: Test edge cases and performance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --extra dev --group testing
        uv pip install "category_encoders>=2.0.0"

    - name: Run performance benchmarks
      run: |
        uv run pytest tests/test_performance_benchmarks.py -v --tb=short --no-cov

    - name: Run edge case tests
      run: |
        uv run pytest tests/test_fallback_mechanism.py -v --tb=short --no-cov

    - name: Test example scripts
      run: |
        if [ -d examples ]; then
          find examples -maxdepth 1 -type f -name "*.py" | while read script; do
            echo "Running ${script}"
            uv run python "${script}"
          done
        fi
