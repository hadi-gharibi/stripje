
[project]
name = "stripje"
dynamic = ["version"]
description = "High-performance single-row inference compiler for scikit-learn pipelines with 2-10x speedup"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = [
    "scikit-learn",
    "sklearn",
    "machine-learning",
    "pipeline",
    "optimization",
    "performance",
    "inference",
    "compiler",
    "single-row",
    "prediction",
    "transformation",
    "preprocessing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Compilers",
    "Topic :: System :: Monitoring",
    "Typing :: Typed"
]
authors = [
    {name = "Hadi Gharibi", email = "hady.gharibi@gmail.com"}
]
dependencies = [
    "numpy>=1.20.0",
    "scikit-learn>=1.0.0",
    "pandas>=1.3.0",
    "Flask",
    "requests"
]

[project.urls]
Homepage = "https://github.com/hadi-gharibi/stripje"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
version = {attr = "stripje.__version__.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=stripje",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "category_encoders: marks tests that require category_encoders",
    "performance: marks performance benchmark tests",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002", "PTH118", "PTH120", "B007"]  # Allow test-specific patterns
"*/__init__.py" = ["F403", "F401"]  # Allow star imports in __init__.py files
"src/stripje/utils.py" = ["ARG002", "SIM102", "B023"]  # Allow utility-specific patterns
"src/stripje/estimators/svm.py" = ["ARG001"]  # Allow unused arguments in placeholder functions
"src/stripje/fast_pipeline.py" = ["SIM108"]  # Allow explicit if-else for clarity in complex logic
"src/stripje/transformers/preprocessing.py" = ["B007"]  # Allow unused loop variables in range loops

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "category_encoders.*",
]
ignore_missing_imports = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess

# Coverage configuration
[tool.coverage.run]
source = ["src/stripje"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.6.0",
    "mypy>=1.10.0",
    "pre-commit>=3.8.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pydocstyle>=6.3.0",
    "psutil>=5.9.0",
    "build>=1.3.0",
    "pbr>=7.0.1",
]
category_encoders = [
    "category_encoders>=2.0.0",
]
testing = [
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "category_encoders>=2.0.0",
]

[project.scripts]
stripje = "stripje:main"
